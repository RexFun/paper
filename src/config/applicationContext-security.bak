<?xml version="1.0" encoding="UTF-8"?>
<b:beans 
	xmlns="http://www.springframework.org/schema/security"
	xmlns:b="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">

	<!-- 配置不需要安全管理的界面 -->
	<http pattern="/**/*.css" security="none"></http>
	<http pattern="/**/*.jpg" security="none"></http>
	<http pattern="/**/*.jpeg" security="none"></http>
	<http pattern="/**/*.gif" security="none"></http>
	<http pattern="/**/*.png" security="none"></http>
	<http pattern="/**/*.js" security="none"></http>
	<http pattern="/view/admin/login.jsp" security="none" />

	<http auto-config="true">
		<form-login login-page="/view/admin/login.jsp"/>
		<!--访问/admin/**资源的用户必须具有ROLE_ADMIN的权限 -->
		<intercept-url pattern="/admin/**" access="ROLE_ADMIN" />
		<!--访问/**资源的用户必须具有ROLE_NO的权限 -->
		<!-- <intercept-url pattern="/client/**" access="ROLE_NO" /> -->
		<session-management>
			<concurrency-control max-sessions="1" error-if-maximum-exceeded="false" />
		</session-management>
		<!--增加一个filter，这点与 Acegi是不一样的，不能修改默认的filter了， 这个filter位于FILTER_SECURITY_INTERCEPTOR之前 -->
		<custom-filter ref="myFilter" before="FILTER_SECURITY_INTERCEPTOR" />
	</http>

	<!--一个自定义的filter，必须包含 authenticationManager,accessDecisionManager,securityMetadataSource三个属性， 
		我们的所有控制将在这三个类中实现，解释详见具体配置 -->
	<b:bean id="myFilter" class="security.MyFilterSecurityInterceptor">
		<!-- 用户拥有的权限 -->
		<b:property name="authenticationManager" ref="authenticationManager" />
		<!-- 用户是否拥有所请求资源的权限 -->
		<b:property name="accessDecisionManager" ref="myAccessDecisionManagerBean" />
		<!-- 资源与权限对应关系 -->
		<b:property name="securityMetadataSource" ref="securityMetadataSource" />
	</b:bean>
	
	<!--验证配置，认证管理器，实现用户认证的入口，主要实现UserDetailsService接口即可 -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider user-service-ref="myUserDetailService">
			<!--如果用户的密码采用加密的话 <password-encoder hash="md5" /> -->
		</authentication-provider>
	</authentication-manager>
	<!--在这个类中，你就可以从数据库中读入用户的密码，角色信息，是否锁定，账号是否过期等 -->
	<b:bean id="myUserDetailService" class="security.MyUserDetailService" />
	
	<!--访问决策器，决定某个用户具有的角色，是否有足够的权限去访问某个资源 -->
	<b:bean id="myAccessDecisionManagerBean" class="security.MyAccessDecisionManager" />
	
	<!--资源源数据定义，将所有的资源和权限对应关系建立起来，即定义某一资源可以被哪些角色访问 -->
	<b:bean id="securityMetadataSource" class="security.MyInvocationSecurityMetadataSource" />

	<!-- 开启Spring Security3认证和授权日志 -->
	<b:bean class="org.springframework.security.authentication.event.LoggerListener" />
	<b:bean class="org.springframework.security.access.event.LoggerListener" />
	
	<!-- 这里定义的messageSource对象供spring security 框架输出异常信息 -->
	<b:bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
	    <b:property name="basename" value="classpath:/org/springframework/security/messages_zh_CN" />
	</b:bean>
</b:beans>